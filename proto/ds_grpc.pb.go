// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: ds.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatastoreClient is the client API for Datastore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastoreClient interface {
	Features(ctx context.Context, in *FeaturesRequest, opts ...grpc.CallOption) (*FeaturesResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (Datastore_QueryClient, error)
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Scrub(ctx context.Context, in *ScrubRequest, opts ...grpc.CallOption) (*ScrubResponse, error)
	CollectGarbage(ctx context.Context, in *CollectGarbageRequest, opts ...grpc.CallOption) (*CollectGarbageResponse, error)
	DiskUsage(ctx context.Context, in *DiskUsageRequest, opts ...grpc.CallOption) (*DiskUsageResponse, error)
	PutWithTTL(ctx context.Context, in *PutWithTTLRequest, opts ...grpc.CallOption) (*PutWithTTLResponse, error)
	SetTTL(ctx context.Context, in *SetTTLRequest, opts ...grpc.CallOption) (*SetTTLResponse, error)
	GetExpiration(ctx context.Context, in *GetExpirationRequest, opts ...grpc.CallOption) (*GetExpirationResponse, error)
}

type datastoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastoreClient(cc grpc.ClientConnInterface) DatastoreClient {
	return &datastoreClient{cc}
}

func (c *datastoreClient) Features(ctx context.Context, in *FeaturesRequest, opts ...grpc.CallOption) (*FeaturesResponse, error) {
	out := new(FeaturesResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Features", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error) {
	out := new(HasResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, "/Datastore/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (Datastore_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Datastore_ServiceDesc.Streams[0], "/Datastore/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &datastoreQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datastore_QueryClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type datastoreQueryClient struct {
	grpc.ClientStream
}

func (x *datastoreQueryClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datastoreClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) Scrub(ctx context.Context, in *ScrubRequest, opts ...grpc.CallOption) (*ScrubResponse, error) {
	out := new(ScrubResponse)
	err := c.cc.Invoke(ctx, "/Datastore/Scrub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) CollectGarbage(ctx context.Context, in *CollectGarbageRequest, opts ...grpc.CallOption) (*CollectGarbageResponse, error) {
	out := new(CollectGarbageResponse)
	err := c.cc.Invoke(ctx, "/Datastore/CollectGarbage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) DiskUsage(ctx context.Context, in *DiskUsageRequest, opts ...grpc.CallOption) (*DiskUsageResponse, error) {
	out := new(DiskUsageResponse)
	err := c.cc.Invoke(ctx, "/Datastore/DiskUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) PutWithTTL(ctx context.Context, in *PutWithTTLRequest, opts ...grpc.CallOption) (*PutWithTTLResponse, error) {
	out := new(PutWithTTLResponse)
	err := c.cc.Invoke(ctx, "/Datastore/PutWithTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) SetTTL(ctx context.Context, in *SetTTLRequest, opts ...grpc.CallOption) (*SetTTLResponse, error) {
	out := new(SetTTLResponse)
	err := c.cc.Invoke(ctx, "/Datastore/SetTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetExpiration(ctx context.Context, in *GetExpirationRequest, opts ...grpc.CallOption) (*GetExpirationResponse, error) {
	out := new(GetExpirationResponse)
	err := c.cc.Invoke(ctx, "/Datastore/GetExpiration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastoreServer is the server API for Datastore service.
// All implementations must embed UnimplementedDatastoreServer
// for forward compatibility
type DatastoreServer interface {
	Features(context.Context, *FeaturesRequest) (*FeaturesResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Has(context.Context, *HasRequest) (*HasResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	Query(*QueryRequest, Datastore_QueryServer) error
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Scrub(context.Context, *ScrubRequest) (*ScrubResponse, error)
	CollectGarbage(context.Context, *CollectGarbageRequest) (*CollectGarbageResponse, error)
	DiskUsage(context.Context, *DiskUsageRequest) (*DiskUsageResponse, error)
	PutWithTTL(context.Context, *PutWithTTLRequest) (*PutWithTTLResponse, error)
	SetTTL(context.Context, *SetTTLRequest) (*SetTTLResponse, error)
	GetExpiration(context.Context, *GetExpirationRequest) (*GetExpirationResponse, error)
	mustEmbedUnimplementedDatastoreServer()
}

// UnimplementedDatastoreServer must be embedded to have forward compatible implementations.
type UnimplementedDatastoreServer struct {
}

func (UnimplementedDatastoreServer) Features(context.Context, *FeaturesRequest) (*FeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Features not implemented")
}
func (UnimplementedDatastoreServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDatastoreServer) Has(context.Context, *HasRequest) (*HasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedDatastoreServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedDatastoreServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDatastoreServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDatastoreServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDatastoreServer) Query(*QueryRequest, Datastore_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDatastoreServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedDatastoreServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedDatastoreServer) Scrub(context.Context, *ScrubRequest) (*ScrubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrub not implemented")
}
func (UnimplementedDatastoreServer) CollectGarbage(context.Context, *CollectGarbageRequest) (*CollectGarbageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectGarbage not implemented")
}
func (UnimplementedDatastoreServer) DiskUsage(context.Context, *DiskUsageRequest) (*DiskUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskUsage not implemented")
}
func (UnimplementedDatastoreServer) PutWithTTL(context.Context, *PutWithTTLRequest) (*PutWithTTLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWithTTL not implemented")
}
func (UnimplementedDatastoreServer) SetTTL(context.Context, *SetTTLRequest) (*SetTTLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTTL not implemented")
}
func (UnimplementedDatastoreServer) GetExpiration(context.Context, *GetExpirationRequest) (*GetExpirationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiration not implemented")
}
func (UnimplementedDatastoreServer) mustEmbedUnimplementedDatastoreServer() {}

// UnsafeDatastoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastoreServer will
// result in compilation errors.
type UnsafeDatastoreServer interface {
	mustEmbedUnimplementedDatastoreServer()
}

func RegisterDatastoreServer(s grpc.ServiceRegistrar, srv DatastoreServer) {
	s.RegisterService(&Datastore_ServiceDesc, srv)
}

func _Datastore_Features_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Features(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Features",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Features(ctx, req.(*FeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatastoreServer).Query(m, &datastoreQueryServer{stream})
}

type Datastore_QueryServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type datastoreQueryServer struct {
	grpc.ServerStream
}

func (x *datastoreQueryServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Datastore_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_Scrub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).Scrub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/Scrub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).Scrub(ctx, req.(*ScrubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_CollectGarbage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectGarbageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).CollectGarbage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/CollectGarbage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).CollectGarbage(ctx, req.(*CollectGarbageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_DiskUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).DiskUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/DiskUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).DiskUsage(ctx, req.(*DiskUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_PutWithTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWithTTLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).PutWithTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/PutWithTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).PutWithTTL(ctx, req.(*PutWithTTLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_SetTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTTLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).SetTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/SetTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).SetTTL(ctx, req.(*SetTTLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpirationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datastore/GetExpiration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetExpiration(ctx, req.(*GetExpirationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datastore_ServiceDesc is the grpc.ServiceDesc for Datastore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datastore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Datastore",
	HandlerType: (*DatastoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Features",
			Handler:    _Datastore_Features_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Datastore_Get_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _Datastore_Has_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _Datastore_GetSize_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Datastore_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Datastore_Delete_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Datastore_Sync_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _Datastore_Batch_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Datastore_Check_Handler,
		},
		{
			MethodName: "Scrub",
			Handler:    _Datastore_Scrub_Handler,
		},
		{
			MethodName: "CollectGarbage",
			Handler:    _Datastore_CollectGarbage_Handler,
		},
		{
			MethodName: "DiskUsage",
			Handler:    _Datastore_DiskUsage_Handler,
		},
		{
			MethodName: "PutWithTTL",
			Handler:    _Datastore_PutWithTTL_Handler,
		},
		{
			MethodName: "SetTTL",
			Handler:    _Datastore_SetTTL_Handler,
		},
		{
			MethodName: "GetExpiration",
			Handler:    _Datastore_GetExpiration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Datastore_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ds.proto",
}
